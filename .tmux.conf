
# tmux起動時のシェルをzshにする
set -g default-shell $SHELL

# Escキーの遅延を解消
set -g escape-time 0

# vimが起動しているかを判定する
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

###########################################################
# 外観
###########################################################

# tmuxを256色表示できるようにする
set -g default-terminal "tmux-256color"
set -as terminal-overrides ",$TERM:Tc"

# Undercurl
# set -g default-terminal "${TERM}"
# set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',vte*:Smulx=\E[4\:%p1%dm'
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0
# set -as terminal-overrides ",$TERM:Tc,vte*:Smulx=\E[4\:%p1%dm,*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m"  # underscore colours - needs tmux-3.0

# message text
set-option -g message-style bg="#70c2b4",fg="#011628"

############################
# ステータスバー
############################

# ステータスバー
## ステータスバーをトップに配置する
set -g status-position top

# ウィンドウ番号の左寄せ
set -g status-justify left

# ステータスバーを描画し直さない
set -g status-interval 0

# ウィンドウのインデックスを1から開始
set -g base-index 1

# ペインのインデックスを1から開始
setw -g pane-base-index 1

# ステータスバーの色を設定する
set -g status-fg "#ffffff"
set -g status-bg "#041d20"

# ステータスバー左のサイズ
set -g status-left-length 20

# 表示内容
set -g status-left '#[bg=#041d20,fg=#296873]#[fg=#041d20,bg=#296873]#[bg=#041d20,fg=#363a43]#[fg=#ffffff,bg=#363a43] Session:#S #[bg=#041d20,fg=#363a43]#[default]'
# set -g status-right ' #[fg=#296873,bg=#363a43]#[fg=#ffffff,bg=#296873]  #(date)  #[fg=#296873,bg=#363a43] #[fg=#363a43,bg=#041d20]'
# set -g status-right '#[fg=#041d20,bg=#363a43]#[fg=#ffffff,bg=#363a43] #(date "+%Y/%m/%d (%a)") #[bg=#041d20,fg=#363a43]#[fg=#041d20,bg=#296873]#[bg=#041d20,fg=#296873]#[default]'
set -g status-right '#[bg=#041d20,fg=#363a43]#[fg=#ffffff,bg=#363a43]  #(date "+%Y/%m/%d %a") #[bg=#041d20,fg=#363a43]#[fg=#041d20,bg=#296873]#[bg=#041d20,fg=#296873]#[default]'
setw -g window-status-format "#[bg=#363a43,fg=#041d20]#[fg=#ffffff,bg=#363a43] #I:#W #[fg=#363a43,bg=#041d20]#[default]"
setw -g window-status-current-format "#[bg=#296873,fg=#041d20]#[fg=#ffffff,bg=#296873] #I:#W #[fg=#296873,bg=#041d20]#[default]"

############################
# ペイン
############################

# 非アクティブなペインは背景色を変える
set -g window-style 'bg=#30333f'
set -g window-active-style 'bg=#24283b'

set -g pane-active-border-style "fg=#296873,bg=#24283b"
set -g pane-border-style "fg=#ffffff,bg=#041d20"

# ペイン毎のステータス表示
set -g pane-border-status bottom
set -g pane-border-format "#(tmux-pane-border.sh #{pane_current_path})"

###########################################################
# キーバインド (normal mode)
###########################################################

# prefixキーをC-wに変更
set -g prefix C-w

# C-bのキーバインドを解除
unbind C-b

# r で設定をリロード
bind r if-shell "$is_vim" 'send-keys C-w r' 'source-file ~/.tmux.conf; display "Reload config! (~/.tmux.conf)"'
bind -n M-r source-file ~/.tmux.conf \; display "Reload config! (~/.tmux.conf)"

# ウィンドウを作成
bind -n 'M-c' 'new-window'
bind -n 'M-q' 'detach-client'

# x でペインをkill
bind x kill-pane
bind -n M-x kill-pane

# ウィンドウ移動
bind -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'previous-window'
bind -n 'M-p' 'previous-window'
bind -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'next-window'
bind -n 'M-n' 'next-window'
bind . 'send-keys C-w .'

# vimのキーバインドでペインを移動する
bind h if-shell "$is_vim" 'send-keys C-w h' 'select-pane -L'
bind j if-shell "$is_vim" 'send-keys C-w j' 'select-pane -D'
bind k if-shell "$is_vim" 'send-keys C-w k' 'select-pane -U'
bind l if-shell "$is_vim" 'send-keys C-w l' 'select-pane -R'
bind -n 'M-h' 'select-pane -L'
bind -n 'M-j' 'select-pane -D'
bind -n 'M-k' 'select-pane -U'
bind -n 'M-l' 'select-pane -R'

# vimのキーバインドでペインをリサイズする
# bind -r H resize-pane -L 5
# bind -r J resize-pane -D 5
# bind -r K resize-pane -U 5
# bind -r L resize-pane -R 5
bind -r H if-shell "$is_vim" 'send-keys C-w h' 'resize-pane -L 3'
bind -r J if-shell "$is_vim" 'send-keys C-w j' 'resize-pane -D 3'
bind -r K if-shell "$is_vim" 'send-keys C-w k' 'resize-pane -U 3'
bind -r L if-shell "$is_vim" 'send-keys C-w l' 'resize-pane -R 3'
bind s if-shell "$is_vim" 'send-keys C-w s' 'choose-tree -s'
bind -n M-s 'choose-tree -s'

# ペインの分割
# | でペインを縦分割する
# - でペインを縦分割する
# bind \| split-window -h
# bind - split-window -v
bind \| if-shell "$is_vim" 'send-keys C-w \|' 'split-window -h'
bind - if-shell "$is_vim" 'send-keys C-w -' 'split-window -v'
bind e if-shell "$is_vim" 'send-keys C-w e' 'split-window -h'
bind i if-shell "$is_vim" 'send-keys C-w i' 'split-window -v'
bind -n M-e 'split-window -h'
bind -n M-i 'split-window -v'

# マウス操作を有効にする
set -g mouse on
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"
bind a setw synchronize-panes \; display "synchronize-panes #{?pane_synchronized,on,off}"
bind -n M-a setw synchronize-panes \; display "synchronize-panes #{?pane_synchronized,on,off}"

# 中央クリックでメニューを表示
unbind -n MouseDown2Pane
bind -n MouseDown2Pane      display-menu -T "#[align=centre]#{window_index}:#{window_name}" -t = -x W -y S \
  "Swap Left"                         l "swap-window -t:-1"                                  \
  "Swap Right"                        r "swap-window -t:+1"                                  \
  "#{?pane_marked_set,,-}Swap Marked" s swap-window                                          \
  ""                                                                                         \
  Kill                                X kill-window                                          \
  Respawn                             R "respawn-window -k"                                  \
  "#{?pane_marked,Unmark,Mark}"       m "select-pane -m"                                     \
  Rename                              n "command-prompt -I \"#W\" \"rename-window -- '%%'\"" \
  ""                                                                                         \
  "New After"                         w "new-window -a"                                      \
  "New At End"                        W new-window

###########################################################
# キーバインド (copy mode)
###########################################################

# コピーモードでvimキーバインドを使う
setw -g mode-keys vi

# prefix + vでコピーモード
bind v copy-mode \; display "Copy mode!"

# 'v' で選択を始める
bind -T copy-mode-vi v send -X begin-selection

# 'V' で行選択
bind -T copy-mode-vi V send -X select-line

# 'C-v' で矩形選択
bind -T copy-mode-vi C-v send -X rectangle-toggle

# Escapeでコピーモードを終了
bind -T copy-mode-vi Escape send-keys -X cancel

# for WSL
# yでヤンク
bind -T copy-mode-vi y send -X copy-pipe-and-cancel "win32yank.exe -i" \; display "Copy!"

## Enterでヤンク
unbind -T copy-mode-vi Enter
bind -T copy-mode-vi Enter send -X copy-pipe-and-cancel "win32yank.exe -i" \; display "Copy!"

# ドラッグでヤンク
# unbind -T copy-mode-vi MouseDragEnd1Pane

# 右クリックでペースト
unbind -n MouseDown3Pane
bind -n MouseDown3Pane run "win32yank.exe -o | tmux load-buffer - && tmux paste-buffer"

# pではりつけ
bind p run "win32yank.exe -o | tmux load-buffer - && tmux paste-buffer"
